<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>初学tensorflow-分类</title>
    <url>/2020/04/02/%E5%88%9D%E5%AD%A6tensorflow-%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<blockquote>
<p><strong>学习使用tensorflow的数字10分类教程</strong></p>
</blockquote>
<h3 id="1、导入功能包"><a href="#1、导入功能包" class="headerlink" title="1、导入功能包"></a>1、导入功能包</h3><pre><code>import tensorflow.compat.v1 as tf
tf.disable_eager_execution()
from tensorflow.examples.tutorials.mnist import input_data</code></pre><hr>
<h3 id="2、下载数据集"><a href="#2、下载数据集" class="headerlink" title="2、下载数据集"></a>2、下载数据集</h3><pre><code>mnist = input_data.read_data_sets(&apos;MNIST_data&apos;, one_hot=True)</code></pre><hr>
<h3 id="3、设计隐层权重、偏置"><a href="#3、设计隐层权重、偏置" class="headerlink" title="3、设计隐层权重、偏置"></a>3、设计隐层权重、偏置</h3><pre><code>def add_layer(inputs, in_size, out_size, activation_function=None,):
    Weights = tf.Variable(tf.random_normal([in_size, out_size]))
    biases = tf.Variable(tf.zeros([1, out_size]) + 0.1,)
    Wx_plus_b = tf.matmul(inputs, Weights) + biases
    if activation_function is None:
        outputs = Wx_plus_b
    else:
        outputs = activation_function(Wx_plus_b,)
    return outputs</code></pre><hr>
<h3 id="4、模型输入"><a href="#4、模型输入" class="headerlink" title="4、模型输入"></a>4、模型输入</h3><pre><code>xs = tf.placeholder(tf.float32, [None, 784])
ys = tf.placeholder(tf.float32, [None, 10])</code></pre><ul>
<li>此题的输入图像为28*28个像素点，需要全部输入网络中训练，所以输入结构为784列。另外此教程为10分类问题，输出结构为10列（one-hot编码）。</li>
</ul>
<hr>
<h3 id="5、模型隐层"><a href="#5、模型隐层" class="headerlink" title="5、模型隐层"></a>5、模型隐层</h3><pre><code>prediction = add_layer(xs, 784, 10,  activation_function=tf.nn.softmax)</code></pre><ul>
<li>此处与回归模型不同，使用的是softmax激活函数，本次设计1层隐层。</li>
</ul>
<hr>
<h3 id="6、模型编译"><a href="#6、模型编译" class="headerlink" title="6、模型编译"></a>6、模型编译</h3><pre><code>cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys * tf.log(prediction),
                                                      reduction_indices=[1])) 
train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)</code></pre><ul>
<li>注意此处计算误差的方式也与回归有区别，此处暂时理解为与激活函数对应。优化器有多种方案，同回归一样。</li>
</ul>
<hr>
<h3 id="7、初始化参数"><a href="#7、初始化参数" class="headerlink" title="7、初始化参数"></a>7、初始化参数</h3><pre><code>sess = tf.Session()
init = tf.global_variables_initializer()
sess.run(init)</code></pre><hr>
<h3 id="8、模型训练"><a href="#8、模型训练" class="headerlink" title="8、模型训练"></a>8、模型训练</h3><pre><code>for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(100)
       sess.run(train_step, feed_dict={xs: batch_xs, ys: batch_ys})</code></pre><ul>
<li>每次训练时并没有把全部数据丢入模型进行训练，此处使用的是全部数据集的100个数据，依据莫烦教程讲解，100个数据依旧能把模型训练的很好。</li>
</ul>
<hr>
<h3 id="9、模型评估"><a href="#9、模型评估" class="headerlink" title="9、模型评估"></a>9、模型评估</h3><pre><code>def compute_accuracy(v_xs, v_ys):
    global prediction
    y_pre = sess.run(prediction, feed_dict={xs: v_xs})
    correct_prediction = tf.equal(tf.argmax(y_pre,1), tf.argmax(v_ys,1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))#计算准确率
    result = sess.run(accuracy, feed_dict={xs: v_xs, ys: v_ys})
    return result</code></pre><ul>
<li>定义模型评估函数</li>
</ul>
<hr>
<pre><code>print(compute_accuracy(
    mnist.test.images, mnist.test.labels))</code></pre><ul>
<li>输出测试集的准确率，评估模型。</li>
</ul>
<hr>
<h3 id="10、代码已上传本人github-其主要根据莫烦代码修改而成。"><a href="#10、代码已上传本人github-其主要根据莫烦代码修改而成。" class="headerlink" title="10、代码已上传本人github,其主要根据莫烦代码修改而成。"></a>10、代码已上传<a href="https://github.com/Gtt-rgb/study_tensorflow" target="_blank" rel="noopener">本人github</a>,其主要根据莫烦代码修改而成。</h3><h3 id="参考文献：1、莫烦tensorflow教程"><a href="#参考文献：1、莫烦tensorflow教程" class="headerlink" title="参考文献：1、莫烦tensorflow教程"></a>参考文献：1、<a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/3-4-A-speed-up-learning/" target="_blank" rel="noopener">莫烦tensorflow教程</a></h3><blockquote>
<p><strong>注意：在tensorflow2.0版本是不存在MNIST教程的，需要额外下载。<a href="https://www.lagou.com/lgeduarticle/72591.html" target="_blank" rel="noopener">下载教程</a></strong></p>
</blockquote>
]]></content>
      <categories>
        <category>tensorflow</category>
      </categories>
      <tags>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title>初学tensorflow-tensorboard使用</title>
    <url>/2020/04/02/%E5%88%9D%E5%AD%A6tensorflow-tensorboard%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p><strong>在1线性回归基础上，利用tensorboard进行可视化。</strong></p>
</blockquote>
<h3 id="1、显示网络框架"><a href="#1、显示网络框架" class="headerlink" title="1、显示网络框架"></a>1、显示网络框架</h3><pre><code>with tf.name_scope(&apos;inputs&apos;):
   xs = tf.placeholder(tf.float32, [None, 1], name=&apos;x_input&apos;)
   ys = tf.placeholder(tf.float32, [None, 1], name=&apos;y_input&apos;)</code></pre><ul>
<li>例子如上：可视化1线性回归的输入层。通过<code>with tf.name_scope(xxx):</code>命令可以可视化网络的任意结构。</li>
</ul>
<hr>
<h3 id="2、显示权重、偏置数据"><a href="#2、显示权重、偏置数据" class="headerlink" title="2、显示权重、偏置数据"></a>2、显示权重、偏置数据</h3><pre><code>Weights = tf.Variable(tf.random_normal([in_size, out_size]), name=&apos;W&apos;)
tf.summary.histogram(layer_name + &apos;/weights&apos;, Weights)</code></pre><ul>
<li>例子如上：可视化权重数据。通过<code>tf.summary.histogram（xxx，xxx）</code>可视化数据信息。</li>
</ul>
<hr>
<h3 id="3、显示损失数据"><a href="#3、显示损失数据" class="headerlink" title="3、显示损失数据"></a>3、显示损失数据</h3><pre><code>loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys - prediction),
                                        reduction_indices=[1]))
tf.summary.scalar(&apos;loss&apos;, loss)</code></pre><ul>
<li>例子如上：可视化损失数据。通过<code>tf.summary.scalar(xxx, loss)</code>可视化损失信息。</li>
</ul>
<hr>
<h3 id="4、（1，2，3）步需要以下命令相配合"><a href="#4、（1，2，3）步需要以下命令相配合" class="headerlink" title="4、（1，2，3）步需要以下命令相配合"></a>4、（1，2，3）步需要以下命令相配合</h3><pre><code>sess = tf.Session()
writer = tf.summary.FileWriter(&quot;logs/&quot;, sess.graph)
merged = tf.summary.merge_all()</code></pre><ul>
<li>含义：建立文件，存储融合数据。</li>
<li>注意：此时没有数据，显示的是网络结构与数据框图。</li>
</ul>
<hr>
<pre><code>result = sess.run(merged,
                          feed_dict={xs: x_data, ys: y_data})
writer.add_summary(result, i)</code></pre><ul>
<li>含义：将数据丢入模型（此处丢入的是merged，不是train！！），得到一批数据，将数据加入到数据融合文件，系统会自动将数据显示在数据框图中。</li>
</ul>
<hr>
<h3 id="5、可视化截图"><a href="#5、可视化截图" class="headerlink" title="5、可视化截图"></a>5、可视化截图</h3><ul>
<li>tensorboard启动：在存储数据文件目录下，输入<code>tensorboard --logdir==“logs\”</code>，在浏览器输入<code>localhost：6006</code>即可。</li>
</ul>
<hr>
<h2 id><a href="#" class="headerlink" title></a><img src="/2020/04/02/%E5%88%9D%E5%AD%A6tensorflow-tensorboard%E4%BD%BF%E7%94%A8/%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.jpg" alt="1、网络结构"></h2><h2 id="-1"><a href="#-1" class="headerlink" title></a><img src="/2020/04/02/%E5%88%9D%E5%AD%A6tensorflow-tensorboard%E4%BD%BF%E7%94%A8/%E6%9D%83%E9%87%8D%E5%8F%8A%E5%81%8F%E7%BD%AE%E6%95%B0%E6%8D%AE.jpg" alt="2、权重及偏置"></h2><p><img src="/2020/04/02/%E5%88%9D%E5%AD%A6tensorflow-tensorboard%E4%BD%BF%E7%94%A8/%E6%8D%9F%E5%A4%B1.jpg" alt="3、损失"></p>
<hr>
<h3 id="6、代码已上传本人github-其主要根据莫烦代码修改而成。"><a href="#6、代码已上传本人github-其主要根据莫烦代码修改而成。" class="headerlink" title="6、代码已上传本人github,其主要根据莫烦代码修改而成。"></a>6、代码已上传<a href="https://github.com/Gtt-rgb/study_tensorflow" target="_blank" rel="noopener">本人github</a>,其主要根据莫烦代码修改而成。</h3><blockquote>
<p><strong>注意：计算机名需要设置为英文，中文情况下生成的tensorboard文件乱码</strong></p>
</blockquote>
<h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><p>1、<a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/3-4-A-speed-up-learning/" target="_blank" rel="noopener">莫烦tensorflow教程</a></p>
]]></content>
      <categories>
        <category>tensorflow</category>
      </categories>
      <tags>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用</title>
    <url>/2020/04/01/git%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p><strong>利用git建立本地仓库管理文章与代码，及上传至github</strong></p>
<h2 id="1、利用git管理本地仓库并上传github"><a href="#1、利用git管理本地仓库并上传github" class="headerlink" title="1、利用git管理本地仓库并上传github"></a>1、<a href="https://baijiahao.baidu.com/s?id=1619544681032320225&wfr=spider&for=pc" target="_blank" rel="noopener">利用git管理本地仓库并上传github</a></h2><p><strong>&gt; 可选</strong><br>1、<a href="https://www.yiibai.com/git/git_push.html" target="_blank" rel="noopener">git教程(全)</a><br>2、<a href="https://blog.csdn.net/qq_32384249/article/details/73038413?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">git找回本地误删的文件</a></p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title>初学tensorflow-线性回归</title>
    <url>/2020/04/01/%E5%88%9D%E5%AD%A6tensorflow-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<blockquote>
<p><strong>通过tensorflow拟合y=a^2-0.5+槽点，以下为代码，分步解析</strong></p>
</blockquote>
<h3 id="1、导入功能包"><a href="#1、导入功能包" class="headerlink" title="1、导入功能包"></a>1、导入功能包</h3><pre><code>import tensorflow.compat.v1 as tf
tf.disable_eager_execution()
import numpy as np
import matplotlib.pyplot as plt</code></pre><h3 id="2、设置需要拟合的函数及数据"><a href="#2、设置需要拟合的函数及数据" class="headerlink" title="2、设置需要拟合的函数及数据"></a>2、设置需要拟合的函数及数据</h3><pre><code>x_data = np.linspace(-1, 1, 300, dtype=np.float32)[:, np.newaxis]
noise = np.random.normal(0, 0.05, x_data.shape).astype(np.float32)
y_data = np.square(x_data) - 0.5 + noise</code></pre><h3 id="3、设计隐层的权重、偏置等"><a href="#3、设计隐层的权重、偏置等" class="headerlink" title="3、设计隐层的权重、偏置等"></a>3、设计隐层的权重、偏置等</h3><pre><code>def add_layer(inputs, in_size, out_size, activation_function=None):
    Weights = tf.Variable(tf.random_normal([in_size, out_size]))
    biases = tf.Variable(tf.zeros([1, out_size]) + 0.1)
    Wx_plus_b = tf.matmul(inputs, Weights) + biases
    if activation_function is None:
        outputs = Wx_plus_b
    else:
        outputs = activation_function(Wx_plus_b)
    return outputs</code></pre><ul>
<li>偏置不能设置为0，令其加0.1.权重用numpy数组随机初始化，通常比全零效果好。</li>
<li>input为输入数据，insize为输入维度，outsize为输出维度，activation_function为激活函数。</li>
<li>tf.variable为tensorflow的变量声明，tf.constant表示常量，tf.add(a,b)表示相加，tf.assign(a,b)表示将b赋值给a，tf.matmul(a,b)表示相乘。<h3 id="4、设计网络的输入层"><a href="#4、设计网络的输入层" class="headerlink" title="4、设计网络的输入层"></a>4、设计网络的输入层</h3>  <code>xs = tf.placeholder(tf.float32, [None, 1])
   ys = tf.placeholder(tf.float32, [None, 1])</code></li>
<li>tensorflow通过占位符placeholder来进行数据的输入，[None,1]表示任意行1列的数据，必须包括类型<h3 id="5、设计网络的隐层"><a href="#5、设计网络的隐层" class="headerlink" title="5、设计网络的隐层"></a>5、设计网络的隐层</h3>  <code>l1 = add_layer(xs, 1, 10, activation_function=tf.nn.relu)
   prediction = add_layer(l1, 10, 1, activation_function=None)</code></li>
<li>回归一般用relu函数即可。如上，隐层为两层，每层包含10个神经元。<h3 id="6、模型编译"><a href="#6、模型编译" class="headerlink" title="6、模型编译"></a>6、模型编译</h3>  <code>loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys-prediction), reduction_indices=[1]))
   train_step = tf.train.GradientDescentOptimizer(0.1).minimize(loss)</code></li>
<li>设计网络的损失函数与优化器，常用的优化器还包括SGD、Adam、Momentum等，优化器能加速网络的训练速度，与学习率相关。<h3 id="7、参数初始化"><a href="#7、参数初始化" class="headerlink" title="7、参数初始化"></a>7、参数初始化</h3><code>sess = tf.Session()
init = tf.global_variables_initializer()
sess.run(init)</code></li>
<li>整个程序内只要包含变量，必须用tf.global——进行初始化。另外，所有的操作都必须通过会话即session.run(xxx)来执行。<h3 id="8、模型训练"><a href="#8、模型训练" class="headerlink" title="8、模型训练"></a>8、模型训练</h3>  for i in range(1000):<pre><code>sess.run(train_step, feed_dict={xs: x_data, ys: y_data})</code></pre></li>
<li>feeddict包含的是输入数据，将数据输入至train_step中进行训练。<h3 id="9、代码已上传本人github-其主要根据莫烦代码修改而成。"><a href="#9、代码已上传本人github-其主要根据莫烦代码修改而成。" class="headerlink" title="9、代码已上传本人github,其主要根据莫烦代码修改而成。"></a>9、代码已上传<a href="https://github.com/Gtt-rgb/study_tensorflow" target="_blank" rel="noopener">本人github</a>,其主要根据莫烦代码修改而成。</h3></li>
</ul>
<h3 id="参考文献：1、莫烦tensorflow教程"><a href="#参考文献：1、莫烦tensorflow教程" class="headerlink" title="参考文献：1、莫烦tensorflow教程"></a>参考文献：1、<a href="https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/3-4-A-speed-up-learning/" target="_blank" rel="noopener">莫烦tensorflow教程</a></h3>]]></content>
      <categories>
        <category>tensorflow</category>
      </categories>
      <tags>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建ROS开发环境</title>
    <url>/2020/03/31/%E6%90%AD%E5%BB%BAROS%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p><em>本文主要对ros开发环境进行搭建</em></p>
<h2 id="1、针对于python语言开发ROS搭建pycharm开发环境"><a href="#1、针对于python语言开发ROS搭建pycharm开发环境" class="headerlink" title="1、针对于python语言开发ROS搭建pycharm开发环境"></a>1、<a href="https://www.cnblogs.com/thebreakofdawn/p/9249372.html" target="_blank" rel="noopener">针对于python语言开发ROS搭建pycharm开发环境</a></h2><h2 id="2、针对于C-语言开发ROS搭建roboware开发环境"><a href="#2、针对于C-语言开发ROS搭建roboware开发环境" class="headerlink" title="2、针对于C++语言开发ROS搭建roboware开发环境"></a>2、<a href="https://www.cnblogs.com/rjjhyj/p/11460793.html" target="_blank" rel="noopener">针对于C++语言开发ROS搭建roboware开发环境</a></h2><p><strong><em>测试</em></strong></p>
<h3 id="1、ROS下创建第一个节点工程"><a href="#1、ROS下创建第一个节点工程" class="headerlink" title="1、ROS下创建第一个节点工程"></a>1、<a href="https://www.cnblogs.com/blue35sky/p/6078771.html" target="_blank" rel="noopener">ROS下创建第一个节点工程</a></h3><p><strong><em>安装roboware</em></strong></p>
<h3 id="1、roboware的github地址"><a href="#1、roboware的github地址" class="headerlink" title="1、roboware的github地址"></a>1、<a href="https://github.com/tonyrobotics/RoboWare/tree/master/Studio" target="_blank" rel="noopener">roboware的github地址</a></h3>]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu两个python分别同时安装tensorflow</title>
    <url>/2020/03/31/ubuntu%E4%B8%A4%E4%B8%AApython%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85tensorflow/</url>
    <content><![CDATA[<blockquote>
<p><strong>本文主要对ubuntu 16.04系统自带python 2.7、python3.5同时安装tensorflow，及验证是否安装成功</strong></p>
</blockquote>
<h2 id="1、两个python安装tensorflow的详细教程"><a href="#1、两个python安装tensorflow的详细教程" class="headerlink" title="1、两个python安装tensorflow的详细教程"></a>1、<a href="https://blog.csdn.net/qq_41833285/article/details/99682549" target="_blank" rel="noopener">两个python安装tensorflow的详细教程</a></h2><h2 id="2、单个python版本tensorflow-gpu的安装"><a href="#2、单个python版本tensorflow-gpu的安装" class="headerlink" title="2、单个python版本tensorflow-gpu的安装"></a>2、<a href="https://blog.csdn.net/sakura__lu/article/details/80622396" target="_blank" rel="noopener">单个python版本tensorflow-gpu的安装</a></h2><h2 id="3、单个python版本tensorflow-gpu的安装2"><a href="#3、单个python版本tensorflow-gpu的安装2" class="headerlink" title="3、单个python版本tensorflow-gpu的安装2"></a>3、<a href="https://blog.csdn.net/macunshi/article/details/84638675" target="_blank" rel="noopener">单个python版本tensorflow-gpu的安装2</a></h2><h2 id="4、测试CUDA是否能用"><a href="#4、测试CUDA是否能用" class="headerlink" title="4、测试CUDA是否能用"></a>4、<a href="https://zhidao.baidu.com/question/1308108448353167699.html" target="_blank" rel="noopener">测试CUDA是否能用</a></h2><h2 id="5、测试tensor-gpu是否可用"><a href="#5、测试tensor-gpu是否可用" class="headerlink" title="5、测试tensor gpu是否可用"></a>5、<a href="https://blog.csdn.net/lidichengfo0412/article/details/102637824" target="_blank" rel="noopener">测试tensor gpu是否可用</a></h2><blockquote>
<p><strong><strong>安装过程存在的问题</strong></strong></p>
</blockquote>
<h3 id="1、运行pip-提示-warning-RequestsDependencyWarning-解决方案"><a href="#1、运行pip-提示-warning-RequestsDependencyWarning-解决方案" class="headerlink" title="1、运行pip 提示(warning, RequestsDependencyWarning)解决方案"></a>1、<a href="https://www.jianshu.com/p/1072e97d5733" target="_blank" rel="noopener">运行pip 提示(warning, RequestsDependencyWarning)解决方案</a></h3><h3 id="2、libcudart-so-8-0-cannot-open-shared-object-file-No-such-file-or-directory-的解决办法"><a href="#2、libcudart-so-8-0-cannot-open-shared-object-file-No-such-file-or-directory-的解决办法" class="headerlink" title="2、libcudart.so.8.0: cannot open shared object file: No such file or directory 的解决办法"></a>2、<a href="https://blog.csdn.net/qq_38451119/article/details/81007904" target="_blank" rel="noopener">libcudart.so.8.0: cannot open shared object file: No such file or directory 的解决办法</a></h3><blockquote>
<p><strong><strong>可选</strong></strong></p>
</blockquote>
<h3 id="1、修改ubuntu两个python优先级"><a href="#1、修改ubuntu两个python优先级" class="headerlink" title="1、修改ubuntu两个python优先级"></a>1、<a href="https://www.cnblogs.com/elitphil/p/11525951.html" target="_blank" rel="noopener">修改ubuntu两个python优先级</a></h3><h3 id="2、ubuntu换源提高下载速度-pip也可设置源"><a href="#2、ubuntu换源提高下载速度-pip也可设置源" class="headerlink" title="2、ubuntu换源提高下载速度(pip也可设置源)"></a>2、<a href="https://blog.csdn.net/u012308586/article/details/102953882" target="_blank" rel="noopener">ubuntu换源提高下载速度(pip也可设置源)</a></h3><blockquote>
<p><strong><strong>注意</strong></strong></p>
</blockquote>
<h3 id="1、在python2-7安装功能包时要用pip2，在python3-5安装功能包时要用pip3！！！！"><a href="#1、在python2-7安装功能包时要用pip2，在python3-5安装功能包时要用pip3！！！！" class="headerlink" title="1、在python2.7安装功能包时要用pip2，在python3.5安装功能包时要用pip3！！！！"></a>1、在python2.7安装功能包时要用pip2，在python3.5安装功能包时要用pip3！！！！</h3><h3 id="2、tensorflow-gpu需要对应相应的cuda与cudnn，详情见tensorflow对应···版本"><a href="#2、tensorflow-gpu需要对应相应的cuda与cudnn，详情见tensorflow对应···版本" class="headerlink" title="2、tensorflow-gpu需要对应相应的cuda与cudnn，详情见tensorflow对应···版本"></a>2、tensorflow-gpu需要对应相应的cuda与cudnn，详情见<a href="https://blog.csdn.net/littlehaes/article/details/100575694" target="_blank" rel="noopener">tensorflow对应···版本</a></h3>]]></content>
      <categories>
        <category>tensorflow</category>
      </categories>
      <tags>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title>针对ros安装存在的rosdep_update问题</title>
    <url>/2020/03/29/%E9%92%88%E5%AF%B9ros%E5%AE%89%E8%A3%85%E5%AD%98%E5%9C%A8%E7%9A%84rosdep-update%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="对于ROS安装存在的rosdep-update与sudo-rosdep-init问题，解决方案如下"><a href="#对于ROS安装存在的rosdep-update与sudo-rosdep-init问题，解决方案如下" class="headerlink" title="对于ROS安装存在的rosdep-update与sudo rosdep init问题，解决方案如下"></a>对于ROS安装存在的rosdep-update与sudo rosdep init问题，解决方案如下</h1><h2 id="1、rosdep-init失败提示error··不能下载、网站不能访问等。"><a href="#1、rosdep-init失败提示error··不能下载、网站不能访问等。" class="headerlink" title="1、rosdep init失败提示error··不能下载、网站不能访问等。"></a>1、rosdep init失败提示error··不能下载、网站不能访问等。</h2><p>  可直接在浏览器访问终端提示的链接，将其内容复制到sourse-list中的20-······文件（文件名在浏览器中已提示）。之后跳过rosdep init即可。</p>
<h2 id="2、对于rosdep-uodate问题，以下三种方法亲测有效。"><a href="#2、对于rosdep-uodate问题，以下三种方法亲测有效。" class="headerlink" title="2、对于rosdep uodate问题，以下三种方法亲测有效。"></a>2、对于rosdep uodate问题，以下三种方法亲测有效。</h2><p>（1）推荐首先使用4g热点尝试。<br>（2）若依旧失败，可修改源，在ubuntu的服务器设置中测试最佳服务器，然后更新，最后终端敲写sudo apt-get update。<br>（3）依旧失败，则终端敲写sudo gedit /etc/resolv.conf，将原有的nameserver这一行注释，并添加以下两行：nameserver 8.8.8.8 #google域名服务器、nameserver 8.8.4.4 #google域名服务器。依次敲写 sudo  apt-get update 、rosdep update。</p>
<hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote>
<p>1、<a href="https://blog.csdn.net/mrh1714348719/article/details/103803110?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">ubuntu安装ROS进行到rosdep update时出现错误，如ERROR: unable to process source …</a><br>2、<a href="https://blog.csdn.net/pj18862486309/article/details/100531506?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">rosdep update 一直失败问题</a></p>
</blockquote>
]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title>利用github与hexo搭建个人博客</title>
    <url>/2020/03/26/%E5%88%A9%E7%94%A8github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="1、B站视频-从0搭建个人博客"><a href="#1、B站视频-从0搭建个人博客" class="headerlink" title="1、B站视频-从0搭建个人博客"></a>1、<a href="https://www.bilibili.com/video/av55890967/" target="_blank" rel="noopener">B站视频-从0搭建个人博客</a></h2><h2 id="2、创建分类与标签"><a href="#2、创建分类与标签" class="headerlink" title="2、创建分类与标签"></a>2、<a href="https://www.cnblogs.com/hankleo/p/11606224.html" target="_blank" rel="noopener">创建分类与标签</a></h2><h2 id="3、本地MarkDown编辑器：MarkDownPad2"><a href="#3、本地MarkDown编辑器：MarkDownPad2" class="headerlink" title="3、本地MarkDown编辑器：MarkDownPad2"></a>3、本地MarkDown编辑器：MarkDownPad2</h2><h2 id="4、博客内显示图片"><a href="#4、博客内显示图片" class="headerlink" title="4、博客内显示图片"></a>4、博客内显示图片</h2><p>（1）post_asset_folder修改为true。<br>（2）git bash安装<code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code>。<br>（3）<code>![](本地图片测试/logo.jpg)</code>。</p>
<p><img src="/2020/03/26/%E5%88%A9%E7%94%A8github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E6%97%BA%E8%B4%A2.jpg" alt="测试图片"> </p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
